//
//  File.swift
//  
//
//  Created by Mikhail Nikanorov on 1/9/23.
//

import Foundation
import Combine
import mew_wallet_ios_walletconnect_v2

public final class WalletConnectSessionPublisher {
  /// Your Wallet should allow users to scan a QR code generated by dapps. You are responsible for implementing it on your own. For testing, you can use our test dapp at: https://react-app.walletconnect.com/, which is v2 protocol compliant. Once you derive a URI from the QR code call pair method: try await WallectConnectServiceImpl.instance.pair(uri: uri)
  /// if everything goes well, you should handle following event:
  public var sessionProposal: AnyPublisher<SessionProposal, Never> {
    return WC2.WalletConnectProvider.instance.events.sessionProposal
      .map { SessionProposal.v2(proposal: $0.proposal, context: $0.context) }
      .eraseToAnyPublisher()
  }

  /// After the session is established, a dapp will request your wallet's users to sign a transaction or a message. Requests will be delivered by the following publisher:
  public var sessionRequest: AnyPublisher<Request, Never> {
    return WC2.WalletConnectProvider.instance.events.sessionRequest
      .compactMap { request -> Request? in
        guard let session = WC2.WalletConnectProvider.instance.sessions.first(where: { $0.topic == request.request.topic }) else { return nil }
        return Request.v2(request: request.request, context: request.context, session: session)
      }
      .eraseToAnyPublisher()
  }
  
  public var authRequests: AnyPublisher<AuthRequest, Never> {
    return WC2.WalletConnectProvider.instance.events.authRequests
      .compactMap {
        return AuthRequest.v2(request: $0.request, context: $0.context)
      }
      .eraseToAnyPublisher()
  }
  
  public var sessionDelete: AnyPublisher<(String, Reason), Never> {
    return WC2.WalletConnectProvider.instance.events.sessionDelete
      .map { ($0, Reason.v2(reason: $1)) }
      .eraseToAnyPublisher()
  }
  
  public var sessionsUpdate: AnyPublisher<Void, Never> {
    return Publishers.Merge4(
      WC2.WalletConnectProvider.instance.events.sessionProposal.map { _ in },
      WC2.WalletConnectProvider.instance.events.sessionSettle.map { _ in },
      WC2.WalletConnectProvider.instance.events.sessionDelete.map { _ in },
      WC2.WalletConnectProvider.instance.events.sessionUpdate.map { _ in }
    )
      .map { _ in }
      .eraseToAnyPublisher()
  }
  
  public var pushRequest: AnyPublisher<PushRequest, Never> {
    return WC2.WalletConnectProvider.instance.events.pushOnSign
      .map {
        return PushRequest.v2(request: $0)
      }
      .eraseToAnyPublisher()
  }
}
